trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '>=4.3.0' 

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: 'FxConsole.sln' 

- task: SonarCloudPrepare@1
  condition: and ( succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'master'))
  displayName: 'Prepare SonarCloud analysis'
  inputs:
    SonarCloud: 'SonarCloud connection 1'
    organization: '$(SonarOrganization)'
    projectKey: '$(SonarProjectKey)'
    projectName: '$(SonarProjectName)'
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
     sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
     sonar.exclusions=**/wwwroot/lib/**/*


- task: MSBuild@1
  displayName: 'Build (configuration=$(buildConfiguration))'
  inputs:
    solution: 'FxConsole.sln'
    configuration: $(buildConfiguration) 

- task: CopyFiles@2
  inputs:
    contents: 'FxConsole/bin/$(buildConfiguration)/**/*'
    targetFolder: '$(Build.ArtifactStagingDirectory)/FxConsole'

- task: SonarCloudAnalyze@1
  condition: and ( succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'master'))
  displayName: 'Run SonarCloud code analysis'

- task: SonarCloudPublish@1
  condition: and ( succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'master'))
  displayName: 'Publish SonarCloud quality gate results'

- task: sonarcloud-buildbreaker@2
  inputs:
    SonarCloud: 'SonarCloud connection 1'
    organization: 'lspangler'


- task: PublishBuildArtifacts@1

